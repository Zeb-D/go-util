package dubbo

import (
	"encoding/base64"
	"fmt"
	hessian "github.com/apache/dubbo-go-hessian2"
	"github.com/stretchr/testify/assert"
	"testing"
)

const DATA = ""

func TestDubboHessian(t *testing.T) {
	bytes, err := base64.StdEncoding.DecodeString(DATA)
	assert.Nil(t, err)
	fmt.Println(bytes)

	// demo a decoder to decode buffer from client
	d := hessian.NewDecoder(bytes)
	lengthObj, _ := d.Decode()
	assert.True(t, lengthObj == int32(4))
	length := lengthObj.(int32)
	fmt.Println(length)
	fmt.Println("resp")
	o, err := d.DecodeValue()
	if err != nil {
		fmt.Println(err)
	}
	fmt.Println(o)

	o, err = d.DecodeValue()
	if err != nil {
		fmt.Println(err)
	}
	fmt.Println("att")
	fmt.Println(o)
}
